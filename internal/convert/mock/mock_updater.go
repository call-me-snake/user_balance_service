// Code generated by MockGen. DO NOT EDIT.
// Source: internal/convert/convert.go

// Package mock_convert is a generated GoMock package.
package mock_convert

import (
	reflect "reflect"

	convert "github.com/call-me-snake/user_balance_service/internal/convert"
	gomock "github.com/golang/mock/gomock"
)

// MockUpdater is a mock of Updater interface.
type MockUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockUpdaterMockRecorder
}

// MockUpdaterMockRecorder is the mock recorder for MockUpdater.
type MockUpdaterMockRecorder struct {
	mock *MockUpdater
}

// NewMockUpdater creates a new mock instance.
func NewMockUpdater(ctrl *gomock.Controller) *MockUpdater {
	mock := &MockUpdater{ctrl: ctrl}
	mock.recorder = &MockUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdater) EXPECT() *MockUpdaterMockRecorder {
	return m.recorder
}

// VerifyOrUpdateConvertData mocks base method.
func (m *MockUpdater) VerifyOrUpdateConvertData() (convert.ConvertData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyOrUpdateConvertData")
	ret0, _ := ret[0].(convert.ConvertData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyOrUpdateConvertData indicates an expected call of VerifyOrUpdateConvertData.
func (mr *MockUpdaterMockRecorder) VerifyOrUpdateConvertData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyOrUpdateConvertData", reflect.TypeOf((*MockUpdater)(nil).VerifyOrUpdateConvertData))
}
