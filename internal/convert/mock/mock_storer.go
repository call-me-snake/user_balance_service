// Code generated by MockGen. DO NOT EDIT.
// Source: internal/convert/convert.go

// Package mock_convert is a generated GoMock package.
package mock_convert

import (
	reflect "reflect"

	model "github.com/call-me-snake/user_balance_service/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockConvertDataStorer is a mock of ConvertDataStorer interface.
type MockConvertDataStorer struct {
	ctrl     *gomock.Controller
	recorder *MockConvertDataStorerMockRecorder
}

// MockConvertDataStorerMockRecorder is the mock recorder for MockConvertDataStorer.
type MockConvertDataStorerMockRecorder struct {
	mock *MockConvertDataStorer
}

// NewMockConvertDataStorer creates a new mock instance.
func NewMockConvertDataStorer(ctrl *gomock.Controller) *MockConvertDataStorer {
	mock := &MockConvertDataStorer{ctrl: ctrl}
	mock.recorder = &MockConvertDataStorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConvertDataStorer) EXPECT() *MockConvertDataStorerMockRecorder {
	return m.recorder
}

// GetConvertData mocks base method.
func (m *MockConvertDataStorer) GetConvertData() (model.ConvertData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConvertData")
	ret0, _ := ret[0].(model.ConvertData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConvertData indicates an expected call of GetConvertData.
func (mr *MockConvertDataStorerMockRecorder) GetConvertData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConvertData", reflect.TypeOf((*MockConvertDataStorer)(nil).GetConvertData))
}
